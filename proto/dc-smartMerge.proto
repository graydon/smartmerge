syntax = "proto3";

import "github.com/relab/gorums/gorums.proto";
import "github.com/relab/smartMerge/blueprints/blueprints.proto";

package proto;

service SMandConsRegister {
	//Read a register value
	rpc Read(Conf) returns (ReadReply) {
		option (gorums.qc) = true;
	}

	// Write a value to the register
	rpc Write(WriteS) returns (ConfReply){
		option (gorums.qc) = true;
	}

	// Inform the servers about a new proposed configuration/blueprint
	rpc WriteNext(WriteN) returns (WriteNReply) {
		option (gorums.qc) = true;
	}

	// Inform the servers that a new configuration has been installed
	rpc SetCur(NewCur) returns (NewCurReply) {
		option (gorums.qc) = true;
	}

	// Propose a value to lattice agreement
	// Only used in smartMerge algorithm
	rpc LAProp(LAProposal) returns (LAReply) {
		option (gorums.qc) = true;
	}

	// Set register and lattice agreement state in new configuration
	rpc SetState(NewState) returns (NewStateReply) {
		option (gorums.qc) = true;
	}

	// Consensus: Paxos first phase
	// Only used in the consensus based algorithm (RAMBO)
	rpc GetPromise(Prepare) returns (Promise) {
		option (gorums.qc) = true;
	}

	// Consensus: Paxos second phase
	// Only used in the consensus based algorithm (RAMBO)
	rpc Accept(Propose) returns (Learn) {
		option (gorums.qc) = true;
	}

	// Fwd is used to forward a reconfiguration-proposal to a leader.
	// Only used in the consensus based algorithm (RAMBO)
	rpc Fwd(Proposal) returns (Ack) {
		option (gorums.qc) = true;
	}
}

message State {
	bytes Value = 1;
	int32 Timestamp = 2;
	uint32 Writer = 3;
}

//This message hold the hash value of the current configuration,
// and the configuration used for this quorum call
message Conf {
	uint32 This = 1;
	uint32 Cur = 2;
}

message ConfReply {
	blueprints.Blueprint Cur = 1;
	bool Abort = 2;
	repeated blueprints.Blueprint Next = 3;
}

message NewCur {
	blueprints.Blueprint Cur = 1; //The blueprint of the current configuration.
	uint32 CurC = 2; 							// Cur.Len(), a hash of the current configuration.
}

message NewCurReply {
	bool New = 1;
}

message Read {
	Conf Conf = 1;
}

message ReadReply {
	State State = 1;
	ConfReply Cur = 2;
}

message WriteS {
	State State = 1;
	Conf Conf = 2;
}

message WriteN {
	uint32 CurC = 1;
	blueprints.Blueprint Next = 2;
}

message WriteNReply {
	ConfReply Cur = 1;
	State State = 2;
	blueprints.Blueprint LAState = 3;
}

message LAProposal {
	Conf Conf = 1;
	blueprints.Blueprint Prop = 2;
}

message LAReply {
	ConfReply Cur = 1;
	blueprints.Blueprint LAState = 2;
}

message NewState {
	uint32 CurC = 1;
	State State = 2;
	blueprints.Blueprint LAState = 3;
}

message NewStateReply {
	blueprints.Blueprint Cur = 1;
	repeated blueprints.Blueprint Next = 2;
}

message CV {		//Consensus Value: (vrnd, vval)
	uint32 Rnd = 1;
	blueprints.Blueprint Val = 2;
}

message Prepare {
	uint32 CurC = 1;
	uint32 Rnd = 2;
}

message Promise {
	blueprints.Blueprint Cur = 1;
	uint32 Rnd = 2;
	CV Val = 3;
	blueprints.Blueprint Dec = 4;
}

message Propose {
	uint32 CurC = 1;
	CV Val = 2;
}

message Learn {
	blueprints.Blueprint Cur = 1;
	blueprints.Blueprint Dec = 2;
	bool Learned = 3;
}

message Proposal {
	blueprints.Blueprint Prop = 1;
}

message Ack {}
