syntax = "proto3";

import "github.com/relab/gorums/gorums.proto";

package proto;

service AdvRegister {
	//Read a register value
	rpc Read(Conf) returns (ReadReply) {
		option (gorums.qc) = true;
	}

	// Write a value to the register
	rpc Write(WriteS) returns (ConfReply){
		option (gorums.qc) = true;
	}

	// Inform the servers about a new proposed configuration/blueprint
	rpc WriteNext(WriteN) returns (WriteNReply) {
		option (gorums.qc) = true;
	}

	// Inform the servers that a new configuration has been installed
	rpc SetCur(NewCur) returns (NewCurReply) {
		option (gorums.qc) = true;
	}

	// Propose a value to lattice agreement
	rpc LAProp(LAProposal) returns (LAReply) {
		option (gorums.qc) = true;
	}

	// Set register and lattice agreement state in new configuration
	rpc SetState(NewState) returns (NewStateReply) {
		option (gorums.qc) = true;
	}

	// Consensus: Paxos first phase
	rpc GetPromise(Prepare) returns (Promise) {
		option (gorums.qc) = true;
	}

	// Consensus: Paxos second phase
	rpc Accept(Propose) returns (Learn) {
		option (gorums.qc) = true;
	}

	// Consensus propagate learned value
	rpc Fwd(Proposal) returns (Ack) {
		option (gorums.qc) = true;
	}
}

message State {
	bytes Value = 1;
	int32 Timestamp = 2;
	uint32 Writer = 3;
}

message Conf {
	uint32 This = 1;
	uint32 Cur = 2;
}

message ConfReply {
	Blueprint Cur = 1;
	bool Abort = 2;
	repeated Blueprint Next = 3;
}

message Node {
	uint32 Id = 1;
	uint32 Version = 2;
}

message Blueprint {
	repeated Node Nodes = 1;
	uint32 FaultTolerance = 3;
	uint32 Epoch = 4;
}

message NewCur {
	Blueprint Cur = 1;
	uint32 CurC = 2;
}

message NewCurReply {
	bool New = 1;
}

message Read {
	Conf Conf = 1;
}

message ReadReply {
	State State = 1;
	ConfReply Cur = 2;
}

message WriteS {
	State State = 1;
	Conf Conf = 2;
}

message WriteN {
	uint32 CurC = 1;
	Blueprint Next = 2;
}

message WriteNReply {
	ConfReply Cur = 1;
	State State = 2;
	Blueprint LAState = 3;
}

message LAProposal {
	Conf Conf = 1;
	Blueprint Prop = 2;
}

message LAReply {
	ConfReply Cur = 1;
	Blueprint LAState = 2;
}

message NewState {
	uint32 CurC = 1;
	State State = 2;
	Blueprint LAState = 3;
}

message NewStateReply {
	Blueprint Cur = 1;
	repeated Blueprint Next = 2;
}

message CV {		//Consensus Value: (vrnd, vval)
	uint32 Rnd = 1;
	Blueprint Val = 2;
}

message Prepare {
	uint32 CurC = 1;
	uint32 Rnd = 2;
}

message Promise {
	Blueprint Cur = 1;
	uint32 Rnd = 2;
	CV Val = 3;
	Blueprint Dec = 4;
}

message Propose {
	uint32 CurC = 1;
	CV Val = 2;
}

message Learn {
	Blueprint Cur = 1;
	Blueprint Dec = 2;
	bool Learned = 3;
}

message Proposal {
	Blueprint Prop = 1;
}

message Ack {}
